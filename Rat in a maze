//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  public:
  void solve(vector<vector<int>> &mat,vector<string>& ans,vector<vector<int>>& visited,int row,int col,string path,int n){
      if(row==n-1 && col==n-1){
          ans.push_back(path);
          return ;
      }
      //for down
      if(row+1<n && !visited[row+1][col] && mat[row+1][col]==1){
          visited[row][col]=1;
          path.push_back('D');
          solve(mat,ans,visited,row+1,col,path,n);
          path.pop_back();
          visited[row][col]=0;
      }
      
      //for left
      if(col-1>=0 && !visited[row][col-1] && mat[row][col-1]==1){
          visited[row][col]=1;
          path.push_back('L');
          solve(mat,ans,visited,row,col-1,path,n);
          path.pop_back();
          visited[row][col]=0;
      }
      
      //for right
      if(col+1<n && !visited[row][col+1] && mat[row][col+1]==1){
          visited[row][col]=1;
          path.push_back('R');
          solve(mat,ans,visited,row,col+1,path,n);
          path.pop_back();
          visited[row][col]=0;
      }
      
      //for upward
      if(row-1>=0 && !visited[row-1][col] && mat[row-1][col]==1){
          visited[row][col]=1;
          path.push_back('U');
          solve(mat,ans,visited,row-1,col,path,n);
          path.pop_back();
          visited[row][col]=0;
      }
  }
    vector<string> findPath(vector<vector<int>> &mat) {
        vector<string> ans;
        int n=mat.size();
        vector<vector<int>> visited(n,vector<int>(n,0));
        int row=0;
        int col=0;
        string path="";
        if(mat[0][0]==1) solve(mat,ans,visited,row,col,path,n);
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends